<?php

return [
    'title' => '타임스탬프를 날짜로 변환 - 유닉스 타임스탬프 변환',
    'h1' => '유닉스 타임스탬프를 날짜로 변환기',
    'meta_keywords' => '타임스탬프를 날짜로 변환기',
    'meta_description' => '무료 온라인 타임스탬프를 날짜로 변환기를 사용하여 유닉스 타임스탬프를 읽을 수 있는 날짜로 쉽게 변환하세요. 빠르고 정확하며 사용하기 간편합니다.',
    'meta_title' => '타임스탬프를 날짜로 변환기 - 즉시 유닉스 타임스탬프 변환',
    'locale' => 'ko-KR',
    'select_language' => '언어 선택',
    'summary' => '유닉스 타임스탬프를 쉽게 변환하세요',
    'copy_time' => '복사',
    'done_copy' => '복사됨!',
    'begin_start' => '1970년 1월 1일부터 초 단위로 시작. (UTC)',
    'enter_time' => '타임스탬프 입력',
    'enter_date' => '날짜 및 시간 입력',
    'year' => '연도',
    'month' => '월',
    'day' => '일',
    'hour' => '시간',
    'hour_24h' => '시간(24시간)',
    'minutes' => '분',
    'seconds' => '초',
    'format' => '형식',
    'your_time_zone' => '귀하의 시간대',
    'relative' => '상대적',
    'what_unix' => '유닉스 타임스탬프란 무엇인가요?',
    'unix_des' => '유닉스 타임스탬프는 시간을 초 단위로 추적하는 방법입니다. 이 카운트는 1970년 1월 1일, 00:00:00 UTC의 유닉스 에포크에서 시작됩니다. 따라서 유닉스 타임스탬프는 특정 날짜와 유닉스 에포크 간의 초 수에 불과합니다. 또한 (이 사이트의 방문자들의 댓글 덕분에) 이 시점은 지구상의 어디에 있든지 변하지 않는다는 점을 지적할 필요가 있습니다. 이는 온라인 및 클라이언트 측의 동적이고 분산된 응용 프로그램에서 날짜별 정보를 추적하고 정렬하는 데 매우 유용합니다.',
    'human_time' => '사람이 읽을 수 있는 시간',
    '1_minute' => '1분',
    '60_second' => '60초',
    '1_hour' => '1시간',
    '3600_second' => '3600초',
    '1_day' => '1일',
    '86400_second' => '86400초',
    '1_week' => '1주',
    '604800_second' => '604800초',
    '1_month' => '1개월 (30.44일)',
    '2629743_second' => '2629743초',
    '1_year' => '1년 (365.24일)',
    '31556926_second' => '31556926초',
    '2038' => '2038년 1월 19일에 무슨 일이 발생하나요?',
    '2038_des_1' => '2038년 문제(Y2038, Epochalypse, Y2k38 또는 Unix Y2K라고도 함)는 많은 디지털 시스템에서 시간을 1970년 1월 1일 00:00:00 UTC 이후 경과한 초 단위로 표시하는 문제와 관련이 있습니다. 이러한 구현은 2038년 1월 19일 03:14:07 UTC 이후의 시간을 인코딩할 수 없습니다. Y2K 문제와 유사하게, 2038년 문제는 시간을 표현하는 데 필요한 용량이 부족한 데서 비롯됩니다.',
    '2038_des_2' => '1970년 1월 1일 이후 서명된 32비트 정수로 저장할 수 있는 최신 시간은 2038년 1월 19일 03:14:07 (1970년 1월 1일부터 2,147,483,647초 후)입니다. 이 날짜 이후 시간을 증가시키려고 시도하는 프로그램은 값을 내부적으로 음수로 저장하며, 이러한 시스템은 이를 1901년 12월 13일 금요일 20:45:52 (1970년 1월 1일 이전 2,147,483,648초)로 해석합니다. 이는 정수 오버플로우로 인해 발생하며, 카운터가 사용 가능한 자릿수를 다 소진하고 대신 부호 비트를 뒤집습니다. 이는 최대 음수 값을 보고하고, 제로까지 계속 계산한 후 다시 양의 정수로 계속 증가합니다. 이러한 시스템에서 발생하는 오류 계산은 사용자 및 기타 관련 당사자에게 문제를 일으킬 수 있습니다.',
];
